syntax = "proto3";
package penumbra.light_wallet;

import "chain.proto";
import "stake.proto";

// A light wallet service.
//
// This protocol attempts to be trust-minimized, both in terms of integrity and privacy.
service LightWallet {
  rpc CompactBlockRange(CompactBlockRangeRequest) returns (stream CompactBlock);
  rpc ChainParams(ChainParamsRequest) returns (chain.ChainParams);
  rpc ValidatorInfo(ValidatorInfoRequest) returns (stream stake.ValidatorInfo);
}

// Requests a range of compact block data.
message CompactBlockRangeRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 3;
  // The start height of the range.
  uint64 start_height = 1;
  // The end height of the range.
  uint64 end_height = 2;
}

// Contains the minimum data needed to update client state.
message CompactBlock {
  uint64 height = 1;
  // Fragments of new notes.
  repeated StateFragment fragments = 2;
  // Nullifiers identifying spent notes.
  repeated bytes nullifiers = 3;
  // Note commitments for notes that have been quarantined in this block.
  repeated QuarantinedFragment quarantined_notes = 4;
  // Nullifiers for notes that were reverted in this block due to slashing while they were
  // unbonding.
  repeated bytes reverted_nullifiers = 5;
}

// The minimum data needed to identify a new note.
message StateFragment {
  // The note commitment for the output note. 32 bytes.
  bytes note_commitment = 2;
  // The encoding of an ephemeral public key. 32 bytes.
  bytes ephemeral_key = 3;
  // An encryption of the newly created note.
  // 132 = 1(type) + 11(d) + 8(amount) + 32(asset_id) + 32(rcm) + 32(pk_d) + 16(MAC) bytes.
  bytes encrypted_note = 4;
}

message QuarantinedFragment {
  // The state fragment that has been quarantined.
  StateFragment fragment = 1;
  // The validator identity key for this state fragment.
  stake.IdentityKey validator_identity_key = 2;
  // The height at which this fragment will become spendable if slashing does not occur.
  uint64 unbonding_height = 3;
}

// Requests the global configuration data for the chain.
message ChainParamsRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
}

// Requests information on the chain's validators.
message ValidatorInfoRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 2;
  // Whether or not to return inactive validators
  bool show_inactive = 1;
}
