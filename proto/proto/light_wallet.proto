syntax = "proto3";
package penumbra.light_wallet;

import "chain.proto";
import "stake.proto";

// A light wallet service.
//
// This protocol attempts to be trust-minimized, both in terms of integrity and privacy.
service LightWallet {
  rpc CompactBlockRange(CompactBlockRangeRequest) returns (stream CompactBlock);
  rpc ChainParams(ChainParamsRequest) returns (chain.ChainParams);
  rpc ValidatorInfo(ValidatorInfoRequest) returns (stream stake.ValidatorInfo);
}

// Requests a range of compact block data.
message CompactBlockRangeRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 3;
  // The start height of the range.
  uint64 start_height = 1;
  // The end height of the range.
  uint64 end_height = 2;
}

// Contains the minimum data needed to update client state.
message CompactBlock {
  uint64 height = 1;
  // Fragments of new notes.
  repeated StateFragment fragments = 2;
  // Nullifiers identifying spent notes.
  repeated bytes nullifiers = 3;
}

// The minimum data needed to identify a new note.
message StateFragment {
  // The note commitment for the output note. 32 bytes.
  bytes note_commitment = 2;
  // The encoding of an ephemeral public key. 32 bytes.
  bytes ephemeral_key = 3;
  // An encryption of the newly created note.
  // 132 = 1(type) + 11(d) + 8(amount) + 32(asset_id) + 32(rcm) + 32(pk_d) + 16(MAC) bytes.
  bytes encrypted_note = 4;
  // If the state fragment represents an update related to quarantine (excepting successful
  // unbonding, which is handled along totally ordinary codepaths client-side), this describes what
  // sort of update the state fragment represents.
  oneof quarantine_update {
    // The fragment is the result of an undelegation to a validator and is currently being
    // quarantined, and will unbond at this height if the validator from which it was undelegated is
    // not slashed before then.
    uint64 quarantined_with_unbonding_height = 5;
    // The fragment is the result of an undelegation to a validator and has been reverted to being
    // spendable again because the validator from which it was undelegated is slashed.
    uint64 reverted_from_quarantined_height = 6;
  }
}

// Requests the global configuration data for the chain.
message ChainParamsRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
}

// Requests information on the chain's validators.
message ValidatorInfoRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 2;
  // Whether or not to return inactive validators
  bool show_inactive = 1;
}
