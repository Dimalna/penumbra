syntax = "proto3";
package penumbra.transaction;
option go_package = "github.com/penumbra-zone/penumbra/proto/go-proto";

import "crypto.proto";
import "stake.proto";
import "ibc.proto";

// A Penumbra transaction.
message Transaction {
  TransactionBody body = 1;
  // The binding signature is stored separately from the transaction body that it signs.
  bytes binding_sig = 2;
  // The root of some previous state of the note commitment tree, used as an anchor for all
  // ZK state transition proofs.
  bytes anchor = 3;
}

// The body of a transaction.
message TransactionBody {
  // A list of actions (state changes) performed by this transaction.
  repeated Action actions = 1;
  // The maximum height that this transaction can be included in the chain.
  //
  // If zero, there is no maximum.
  uint64 expiry_height = 3;
  // The chain this transaction is intended for.  Including this prevents
  // replaying a transaction on one chain onto a different chain.
  string chain_id = 4;
  // The transaction fee.
  Fee fee = 5;
}

// A state change performed by a transaction.
message Action {
  oneof action {
    Spend spend = 1;
    Output output = 2;
    stake.Delegate delegate = 3;
    stake.Undelegate undelegate = 4;

    stake.ValidatorDefinition validator_definition = 16;
    ibc.IBCAction ibc_action = 17;
  }
}

// Specifies fees paid by a transaction.
message Fee {
    uint64 amount = 1;
}

// Spends a shielded note.
message Spend {
  // The authorizing data for the spend, which is included in the authorization hash used for signing.
  SpendBody body = 1;
  // The spend authorization signature is effecting data.
  crypto.SpendAuthSignature auth_sig = 2;
  // The spend proof is effecting data.
  bytes zkproof = 3;
}

// The body of a spend description, containing only the "authorizing" data
// included in the authorization hash used for signing, and not the "effecting"
// data which is bound to the authorizing data by some other means.
message SpendBody {
  // A commitment to the value of the input note.
  bytes cv = 1;
  // The nullifier of the input note.
  bytes nullifier = 3;
  // The randomized validating key for the spend authorization signature.
  bytes rk = 4;
}

// Creates a new shielded note.
message Output {
  // The authorizing data for the output.
  OutputBody body = 1;
  // The output proof is effecting data.
  bytes zkproof = 2;
}

// The body of an output description, containing only the "authorizing" data
// included in the authorization hash used for signing, and not the "effecting"
// data which is bound to the authorizing data by some other means.
message OutputBody {
  // The minimal data required to scan and process the new output note.
  crypto.NotePayload note_payload = 1;
  // A commitment to the value of the output note. 32 bytes.
  bytes cv = 2;
  // An encrypted memo. 528 bytes.
  bytes encrypted_memo = 3;
  // The key material used for note encryption, wrapped in encryption to the
  // sender's outgoing viewing key. 80 bytes.
  bytes ovk_wrapped_key = 4;
}
